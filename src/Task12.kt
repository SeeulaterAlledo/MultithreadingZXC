import kotlin.concurrent.Volatile

object TimerExample {
    @Volatile
    private var running = true

    @JvmStatic
    fun main(args: Array<String>) {
        val timerThread = Thread(Runnable {
            var seconds = 0
            while (running) {
                println("–ü—Ä–æ—à–ª–æ —Å–µ–∫—É–Ω–¥: $seconds")
                try {
                    Thread.sleep(1000)
                } catch (e: InterruptedException) {
                    println("–¢–∞–π–º–µ—Ä –ø—Ä–µ—Ä–≤–∞–Ω.")
                    return@Runnable
                }
                seconds++
            }
            println("‚èπ –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        })

        val stopperThread = Thread {
            try {
                Thread.sleep(10000)
            } catch (e: InterruptedException) {
                e.printStackTrace()
            }
            running = false
            println("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä...")
        }

        timerThread.start()
        stopperThread.start()

        try {
            timerThread.join()
            stopperThread.join()
        } catch (e: InterruptedException) {
            e.printStackTrace()
        }
    }
}